name: DTAP Deployment
on:
  push:
    branches:
      - master
      - staging
      - development

jobs:
  SonarQube:
    name: SonarQube analysis
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"ICTDTWDa3_Server_9a25f1c7-cd56-45a3-8387-ad6be2945a1b" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  deploy_dev:
    name: DEV
    if: github.ref == 'refs/heads/development'
    environment:
      name: DEV
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Prune old images
        run: docker image prune -a -f
        working-directory: ${{ github.workspace }}
        
      - name: Prune build cache
        run: docker builder prune -a -f
        working-directory: ${{ github.workspace }}
        
      - name: Build shared dll
        run: |
          export DOTNET_ROOT=$HOME/.dotnet
          export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools
          cd ./KeuzeWijzerCore && dotnet publish --os linux --arch x64 /t:PublishContainer

      - name: Copy shared dll
        run: |
          cp ./KeuzeWijzerCore/bin/Release/net8.0/linux-x64/KeuzeWijzerCore.dll ./

      - name: Build and start container for Development
        run: |
          docker compose build
          docker compose -f docker-compose.yml -p ${{ vars.ENV_KEY }}-server up -d --remove-orphans
        env:
          SENDGRID_KEY: ${{ secrets.SENDGRID_KEY }}
          AZUREAD_CLIENTSECRET: "${{ secrets.AZUREAD_CLIENTSECRET }}"
          API_PORT: "${{ vars.API_PORT }}"
          MVC_PORT: "${{ vars.MVC_PORT }}"
          ASPNETCORE_ENVIRONMENT: "${{ vars.ASPNETCORE_ENVIRONMENT }}"
          DB_HOST: "${{ vars.DB_HOST }}"
          DB_NAME: "${{ vars.DB_NAME }}"
          DB_USER: "${{ secrets.DB_USER }}"
          DB_PASSWORD: "${{ secrets.DB_PASSWORD }}"
          ENV_KEY: "${{ vars.ENV_KEY }}"
        working-directory: ${{ github.workspace }}

  deploy_tst:
    name: TST
    if: github.ref == 'refs/heads/staging'
    environment:
      name: TST
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Prune old images
        run: docker image prune -a -f
        working-directory: ${{ github.workspace }}

      - name: Prune build cache
        run: docker builder prune -a -f
        working-directory: ${{ github.workspace }}        

      - name: Build shared dll
        run: |
          export DOTNET_ROOT=$HOME/.dotnet
          export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools
          cd ./KeuzeWijzerCore && dotnet publish --os linux --arch x64 /t:PublishContainer

      - name: Copy shared dll
        run: |
          cp ./KeuzeWijzerCore/bin/Release/net8.0/linux-x64/KeuzeWijzerCore.dll ./

      - name: Build and start container for Development
        run: |
          docker compose build
          docker compose -f docker-compose.yml -p ${{ vars.ENV_KEY }}-server up -d --remove-orphans
        env:
          SENDGRID_KEY: ${{ secrets.SENDGRID_KEY }}
          AZUREAD_CLIENTSECRET: "${{ secrets.AZUREAD_CLIENTSECRET }}"
          API_PORT: "${{ vars.API_PORT }}"
          MVC_PORT: "${{ vars.MVC_PORT }}"
          ASPNETCORE_ENVIRONMENT: "${{ vars.ASPNETCORE_ENVIRONMENT }}"
          DB_HOST: "${{ vars.DB_HOST }}"
          DB_NAME: "${{ vars.DB_NAME }}"
          DB_USER: "${{ secrets.DB_USER }}"
          DB_PASSWORD: "${{ secrets.DB_PASSWORD }}"
          ENV_KEY: "${{ vars.ENV_KEY }}"
        working-directory: ${{ github.workspace }}

  deploy_acc:
    name: ACC
    if: github.ref == 'refs/heads/staging'
    environment:
      name: ACC
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Prune old images
        run: docker image prune -a -f
        working-directory: ${{ github.workspace }}

      - name: Prune build cache
        run: docker builder prune -a -f
        working-directory: ${{ github.workspace }}        

      - name: Build shared dll
        run: |
          export DOTNET_ROOT=$HOME/.dotnet
          export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools
          cd ./KeuzeWijzerCore && dotnet publish --os linux --arch x64 /t:PublishContainer

      - name: Copy shared dll
        run: |
          cp ./KeuzeWijzerCore/bin/Release/net8.0/linux-x64/KeuzeWijzerCore.dll ./

      - name: Build and start container for Development
        run: |
          docker compose build
          docker compose -f docker-compose.yml -p ${{ vars.ENV_KEY }}-server up -d --remove-orphans
        env:
          SENDGRID_KEY: ${{ secrets.SENDGRID_KEY }}
          AZUREAD_CLIENTSECRET: "${{ secrets.AZUREAD_CLIENTSECRET }}"
          API_PORT: "${{ vars.API_PORT }}"
          MVC_PORT: "${{ vars.MVC_PORT }}"
          ASPNETCORE_ENVIRONMENT: "${{ vars.ASPNETCORE_ENVIRONMENT }}"
          DB_HOST: "${{ vars.DB_HOST }}"
          DB_NAME: "${{ vars.DB_NAME }}"
          DB_USER: "${{ secrets.DB_USER }}"
          DB_PASSWORD: "${{ secrets.DB_PASSWORD }}"
          ENV_KEY: "${{ vars.ENV_KEY }}"
        working-directory: ${{ github.workspace }}

  deploy_prod:
    name: PRD
    if: github.ref == 'refs/heads/master'
    environment:
      name: PRD
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Prune old images
        run: docker image prune -a -f
        working-directory: ${{ github.workspace }}

      - name: Prune build cache
        run: docker builder prune -a -f
        working-directory: ${{ github.workspace }}        

      - name: Build shared dll
        run: |
          export DOTNET_ROOT=$HOME/.dotnet
          export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools
          cd ./KeuzeWijzerCore && dotnet publish --os linux --arch x64 /t:PublishContainer

      - name: Copy shared dll
        run: |
          cp ./KeuzeWijzerCore/bin/Release/net8.0/linux-x64/KeuzeWijzerCore.dll ./

      - name: Build and start container for Production
        run: |
          docker compose build
          docker compose -f docker-compose.yml -p ${{ vars.ENV_KEY }}-server up -d --remove-orphans
        env:
          SENDGRID_KEY: ${{ secrets.SENDGRID_KEY }}
          AZUREAD_CLIENTSECRET: "${{ secrets.AZUREAD_CLIENTSECRET }}"
          API_PORT: "${{ vars.API_PORT }}"
          MVC_PORT: "${{ vars.MVC_PORT }}"
          ASPNETCORE_ENVIRONMENT: "${{ vars.ASPNETCORE_ENVIRONMENT }}"
          DB_HOST: "${{ vars.DB_HOST }}"
          DB_NAME: "${{ vars.DB_NAME }}"
          DB_USER: "${{ secrets.DB_USER }}"
          DB_PASSWORD: "${{ secrets.DB_PASSWORD }}"
          ENV_KEY: "${{ vars.ENV_KEY }}"
          working-directory: ${{ github.workspace }}
